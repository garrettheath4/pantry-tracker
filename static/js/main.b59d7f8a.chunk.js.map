{"version":3,"sources":["system.js","numbers.js","ItemCount.jsx","ItemButton.jsx","Item.jsx","useDebounce.js","Inventory.jsx","ItemLists.js","App.js","serviceWorker.js","index.js"],"names":["apiAppUpdate","console","log","url","fetch","then","res","text","includes","window","location","reload","catch","err","apiSystemRestart","numOrDefault","altNum","num","numOrZero","numOrOne","nonNegNum","Math","max","roundToOne","round","Number","EPSILON","deltaGenerator","twoNums","delta","x","plusDeltaGenerator","y","minusDeltaGenerator","ItemCount","count","name","className","displayCount","displayName","icon","pulse","endsWith","slice","ItemButton","onClickHandler","increments","onClick","size","warnedAboutHtmlRespFromFetch","Item","item","itemName","plusDelta","increment","minusDelta","decrement","useState","undefined","setCountState","debouncedCount","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","a","async","toLowerCase","isNaN","fetchData","newCount","nonNegCount","resStr","String","apiCommitCount","countHandlerFactory","deltaFn","Inventory","items","classnames","inventoryGridSmall2","length","inventoryGridSmall3","map","key","communalItems","garrettItems","fontAwesomeLibrary","add","faMinus","faPlus","faSpinner","faSync","faPowerOff","App","garrettItemsVisible","setGarrettItemsVisible","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b59d7f8a.chunk.js","sourcesContent":["export function apiAppUpdate() {\n  console.log('Sending API request to update app')\n  const url = '/api/app/update?blocking=true'\n  fetch(url)\n    .then(res => {\n      console.log(res)\n      return res.text()\n    })\n    .then(res => {\n      if (res.includes('</html>')) {\n        console.log(\n          'Warning:',\n          url,\n          '-> HTML response (expected OK).',\n          'Is the API not running?'\n        )\n      }\n      window.location.reload()\n    })\n    .catch(err => console.log('Error: API request to update app failed.', err))\n}\n\nexport function apiSystemRestart() {\n  console.log('Sending API request to restart system')\n  const url = '/api/system/restart'\n  fetch(url)\n    .then(res => {\n      console.log(res)\n      return res.text()\n    })\n    .then(res => {\n      if (res.includes('</html>')) {\n        console.log(\n          'Warning:',\n          url,\n          '-> HTML response (expected OK).',\n          'Is the API not running?'\n        )\n      }\n    })\n    .catch(err =>\n      console.log('Error: API request to restart system failed.', err)\n    )\n}\n","// Source: https://stackoverflow.com/a/18358056/1360295\n\nconst numOrDefault = altNum => num => num || altNum\nconst numOrZero = numOrDefault(0)\nconst numOrOne = numOrDefault(1)\n\nexport const nonNegNum = num => Math.max(numOrZero(num), 0)\nexport const roundToOne = num =>\n  Math.round((Number(num) + Number.EPSILON) * 10) / 10\nconst nonNegRoundedNum = num => roundToOne(nonNegNum(num))\n\nconst plus = (x, y) => x + y\nconst minus = (x, y) => x - y\n\n// const plusFn = (x) => Math.max((x || 0) + (item.increment || 1), 0)\n// const minusFn = (x) => Math.max((x || 0) - (item.decrement || 1), 0)\nconst deltaGenerator = twoNums => delta => x =>\n  nonNegRoundedNum(twoNums(numOrZero(x), numOrOne(delta)))\n\nexport const plusDeltaGenerator = deltaGenerator(plus)\nexport const minusDeltaGenerator = deltaGenerator(minus)\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { roundToOne } from './numbers'\n\nconst ItemCount = ({ count, name }) => {\n  return (\n    <span className=\"pure-u-3-4 countNumber\">\n      {displayCount(count)} {displayName(name, count)}\n    </span>\n  )\n}\nexport default ItemCount\n\nconst displayCount = function(count) {\n  if (typeof count === 'undefined') {\n    return <FontAwesomeIcon icon=\"spinner\" pulse />\n  } else if (count === null) {\n    return '??'\n  } else {\n    return roundToOne(count)\n  }\n}\n\nconst displayName = (name, count) => {\n  if (count === 1 && name.endsWith('s')) {\n    return name.slice(0, -1)\n  }\n  return name\n}\n\n// vim: set ts=2 sw=2 sta sts=2 sr et ai:\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst ItemButton = ({ onClickHandler, increments }) => {\n  return (\n    <div className=\"pure-u-1-8\">\n      <button className=\"pure-button countButton\" onClick={onClickHandler}>\n        {increments ? (\n          <FontAwesomeIcon size=\"2x\" icon=\"plus\" />\n        ) : (\n          <FontAwesomeIcon size=\"2x\" icon=\"minus\" />\n        )}\n      </button>\n    </div>\n  )\n}\n\nexport default ItemButton\n","import React, { useState, useEffect } from 'react'\n\nimport ItemCount from './ItemCount'\nimport ItemButton from './ItemButton'\nimport useDebounce from './useDebounce'\nimport { minusDeltaGenerator, nonNegNum, plusDeltaGenerator } from './numbers'\n\nlet warnedAboutHtmlRespFromFetch = false\n\nconst Item = ({ item }) => {\n  const { name: itemName } = item\n  const plusDelta = plusDeltaGenerator(item.increment)\n  const minusDelta = minusDeltaGenerator(item.decrement)\n\n  const [count, setCountState] = useState(undefined)\n\n  const debouncedCount = useDebounce(count, 1500)\n\n  useEffect(() => {\n    async function fetchData() {\n      const url = `/api/item?name=${itemName.toLowerCase()}`\n      const res = await fetch(url)\n      res\n        .text()\n        .then(res => {\n          const num = Number(res)\n          if (!Number.isNaN(num)) {\n            setCountState(num)\n          } else {\n            setCountState(null)\n            if (!warnedAboutHtmlRespFromFetch) {\n              warnedAboutHtmlRespFromFetch = true\n              if (res.includes('</html>')) {\n                console.log(\n                  'Warning:',\n                  url,\n                  '-> HTML response (expected a number).',\n                  'Is the API not running?'\n                )\n              } else {\n                console.log(\n                  'Warning: received very unexpected response from',\n                  ` API while fetching ${itemName.toLowerCase()}:`,\n                  res\n                )\n              }\n            }\n          }\n        })\n        .catch(err => {\n          setCountState(null)\n          console.log('Unable to fetch count for', itemName, '.', err)\n        })\n    }\n\n    // noinspection JSIgnoredPromiseFromCall\n    fetchData()\n  }, [itemName])\n\n  useEffect(() => {\n    if (typeof debouncedCount !== 'undefined' && debouncedCount !== null) {\n      // noinspection JSIgnoredPromiseFromCall\n      apiCommitCount(itemName, debouncedCount)\n    }\n  }, [debouncedCount, itemName])\n\n  const countHandlerFactory = deltaFn => () => setCountState(deltaFn(count))\n\n  return (\n    <div className=\"pure-u-1-2 item\">\n      <ItemButton\n        increments={true}\n        onClickHandler={countHandlerFactory(plusDelta)}\n      />\n      <ItemCount count={count} name={itemName} />\n      <ItemButton\n        increments={false}\n        onClickHandler={countHandlerFactory(minusDelta)}\n      />\n    </div>\n  )\n}\nexport default Item\n\nfunction apiCommitCount(itemName, newCount) {\n  const nonNegCount = nonNegNum(newCount)\n  const url = `/api/item?name=${itemName.toLowerCase()}&count=${nonNegCount}`\n  return fetch(url)\n    .then(res => res.text())\n    .then(res => {\n      if (nonNegCount !== Number(res)) {\n        const resStr = String(res)\n        if (resStr.includes('</html>')) {\n          console.log(\n            'Warning:',\n            url,\n            `-> HTML response (expected ${nonNegCount})`\n          )\n        } else {\n          console.log(\n            'Warning: Did not receive expected response of',\n            nonNegCount,\n            'from API'\n          )\n          console.log('Received:', resStr)\n        }\n      }\n    })\n    .catch(err => console.log('Unable to set item count through API', err))\n}\n\n// vim: set ts=2 sw=2 sta sts=2 sr et ai si:\n","import { useState, useEffect } from 'react'\n\n// Our hook\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below).\n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value, delay]\n  )\n\n  return debouncedValue\n}\n","import React from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item.jsx'\n\nconst Inventory = ({ items }) => {\n  return (\n    <div\n      className={classnames('pure-g', 'inventoryGrid', {\n        inventoryGridSmall2: items.length < 3,\n        inventoryGridSmall3: items.length === 3,\n      })}\n    >\n      {items.map(item => (\n        <Item item={item} key={item.name} />\n      ))}\n    </div>\n  )\n}\nexport default Inventory\n\n// vim: set ts=2 sw=2 sta sts=2 sr et ai:\n","export const communalItems = [\n  { name: 'apples' },\n  { name: 'bananas' },\n  { name: 'oranges' },\n  { name: 'clementines' },\n]\n\nexport const garrettItems = [\n  { name: 'tuna salad', increment: 6 },\n  { name: 'bread', increment: 8 },\n  { name: 'cheese', increment: 10 },\n  { name: 'lettuce', increment: 16 },\n  { name: 'mayonnaise', decrement: 0.1 },\n  { name: 'tuna cans', increment: 2 },\n  { name: 'chopped veggies', increment: 12 },\n  { name: 'relish (backup)' },\n  { name: 'soylent Mocha drink' },\n  { name: 'soylent Mint Choc drink' },\n  { name: 'soylent Mocha powder', decrement: 0.1 },\n  { name: 'soy milk', decrement: 0.1 },\n  { name: 'chocolate syrup', decrement: 0.1 },\n  { name: 'cereal', decrement: 0.1 },\n  { name: 'coke (big)' },\n  { name: 'coke (small)' },\n  { name: 'coke Zero (small)' },\n  { name: 'steamable meals' },\n  { name: 'noodle bowls' },\n  { name: 'protein bars' },\n  { name: 'chip bags' },\n  { name: 'dairy milk', decrement: 0.1 },\n  { name: 'peanut butter', decrement: 0.1 },\n]\n","import React, { useState } from 'react'\nimport { library as fontAwesomeLibrary } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faMinus,\n  faPlus,\n  faSpinner,\n  faSync,\n  faPowerOff,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { apiAppUpdate, apiSystemRestart } from './system'\nimport Inventory from './Inventory.jsx'\nimport { communalItems, garrettItems } from './ItemLists'\nimport './App.css'\n\nfontAwesomeLibrary.add(faMinus, faPlus, faSpinner, faSync, faPowerOff)\n\nfunction App() {\n  // Raspberry Pi touchscreen resolution is 800 x 480\n\n  const [garrettItemsVisible, setGarrettItemsVisible] = useState(false)\n\n  const toggleGarrettItemsVisible = () =>\n    setGarrettItemsVisible(!garrettItemsVisible)\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"inventoryHeader\">Snack Item Tracker</h2>\n      <h5 className=\"inventorySubheader\">\n        Help us keep track of what snack items we have so we can know when to\n        get more if we run low.\n      </h5>\n      <Inventory items={communalItems} />\n      <div className=\"inventoryHeader\">\n        <button className=\"subtleButton\" onClick={apiAppUpdate}>\n          {garrettItemsVisible\n            ? 'Pull & Build Server, then Refresh App (~1 minute)'\n            : <FontAwesomeIcon icon=\"sync\" />}\n        </button>\n        <button className=\"subtleButton bold\" onClick={toggleGarrettItemsVisible}>\n          {garrettItemsVisible\n            ? 'Hide Garrett\\'s items'\n            : 'Show Garrett\\'s items'}\n        </button>\n        <button className=\"subtleButton\" onClick={apiSystemRestart}>\n          {garrettItemsVisible\n            ? 'Reboot server (possibly this device; ~2 minutes)'\n            : <FontAwesomeIcon icon=\"power-off\" />}\n        </button>\n      </div>\n      {garrettItemsVisible && <Inventory items={garrettItems} />}\n    </div>\n  )\n}\n\nexport default App\n\n\n// vim: set ts=2 sw=2 sta sts=2 sr et ai:\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}